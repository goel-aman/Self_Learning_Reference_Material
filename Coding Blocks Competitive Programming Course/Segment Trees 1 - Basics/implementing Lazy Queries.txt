#include<iostream>
#include<bits/stdc++.h>
using namespace std;
#define ul unsigned long long int

int lazy[10000] = {0};

void updateRangeLazy(int* tree,int ss,int se,int l,int r,int inc,int index){
	// before going down resolve the value if it exists
	if(lazy[index] != 0){
		tree[index] += lazy[index];
		
		if(ss != se){
			lazy[2*index] += lazy[index];
			lazy[2*index+1] += lazy[index];
		}
		
		lazy[index] = 0; // clear the lazy value at current node
	}
	
	// Base Case
	// No Overlap
	if(ss > r || l > se){
		return ;
	}
	
	//another cases
	if(ss >= l && se <=r){
		tree[index] += inc;
		// Create a new lazy value of children node
		if(ss != se){
			lazy[2*index] += inc;
			lazy[2*index + 1] += inc; 
		}
		return ;
	}
	
	int mid = (ss+se)/2;
	updateRangeLazy(tree,ss,mid,l,r,inc,2*index);
	updateRangeLazy(tree,mid+1,se,l,r,inc,2*index+1);
	// update this tree[index]
	tree[index] = min(tree[2*index],tree[2*index]+1);
	return;
	
	
	
	
	
}



void buildTree(int *a,int s,int e,int *tree,int index){
	if(s == e){
		tree[index] = a[s];
		return ;
	}
	
	// Recursive Case
	int mid = (s+e)/2;
	buildTree(a,s,mid,tree,2*index);
	buildTree(a,mid+1,e,tree,2*index+1);
	tree[index] = min(tree[2*index],tree[2*index + 1]);
	return ;
}

int queryLazy(int* tree,int ss,int se,int qs,int qe,int index){
	//resolve the lazy value at current node
	if(lazy[index] != 0){
		tree[index] += lazy[index];
		// non leaf node
		if(ss != se){
			lazy[2*index] += lazy[index];
			lazy[2*index+1] += lazy[index];
		}
		lazy[index] = 0; // clear the lazy value at current node
	}
	
	// query lgoic
	// no overlap
	if(ss>qe || se<qs){
		return INT_MAX;
	}
	
	// complete Overlap
	if(ss>= qs && se <= qe){
		return tree[index];
	}
	
	// partial overalp
	int mid = (ss+se)/2;
	int left = queryLazy(tree,ss,mid,qs,qe,2*index);
	int right = queryLazy(tree,mid+1,se,qs,qe,2*index+1);
	return min(left,right);
}


int main(){
	
	int a[] = {1,3,2,-5,6,4};
	int n = sizeof(a) / sizeof(int);
	
	int * tree = new int[4*n + 1];
	buildTree(a,0,n-1,tree,1);

	updateRangeLazy(tree,0,n-1,0,2,10,1);
	updateRangeLazy(tree,0,n-1,0,4,10,1);
	cout<<"Q1 1-1"<<queryLazy(tree,0,n-1,1,1,1)<<endl;
	updateRangeLazy(tree,0,n-1,3,4,10,1);
	cout<<"Q1 3-5 "<< queryLazy(tree,0,n-1,3,5,1);
	
	return 0;
}